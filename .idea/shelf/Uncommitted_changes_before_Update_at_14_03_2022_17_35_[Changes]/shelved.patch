Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from termcolor import colored as cl\r\nfrom random import randint as ri, choice\r\nfrom time import sleep as s\r\n\r\n# 'word' is a string.\r\n# 'idx' is a list containing two values (8a -> [8,1]) and usually refers to the index of the first letter in the word.\r\n# 'direc' is a character, h(orizontal) or v(ertical).\r\n\r\nclass Board:\r\n\r\n    def __init__(self):\r\n        self.board = [[\"  \",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\"],\r\n                     [\" 1\",s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15],\r\n                     [\" 2\",s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28,s29,s30],\r\n                     [\" 3\",s31,s32,s33,s34,s35,s36,s37,s38,s39,s40,s41,s42,s43,s44,s45],\r\n                     [\" 4\",s46,s47,s48,s49,s50,s51,s52,s53,s54,s55,s56,s57,s58,s59,s60],\r\n                     [\" 5\",s61,s62,s63,s64,s65,s66,s67,s68,s69,s70,s71,s72,s73,s74,s75],\r\n                     [\" 6\",s76,s77,s78,s79,s80,s81,s82,s83,s84,s85,s86,s87,s88,s89,s90],\r\n                     [\" 7\",s91,s92,s93,s94,s95,s96,s97,s98,s99,s100,s101,s102,s103,s104,s105],\r\n                     [\" 8\",s106,s107,s108,s109,s110,s111,s112,s113,s114,s115,s116,s117,s118,s119,s120],\r\n                     [\" 9\",s121,s122,s123,s124,s125,s126,s127,s128,s129,s130,s131,s132,s133,s134,s135],\r\n                     [\"10\",s136,s137,s138,s139,s140,s141,s142,s143,s144,s145,s146,s147,s148,s149,s150],\r\n                     [\"11\",s151,s152,s153,s154,s155,s156,s157,s158,s159,s160,s161,s162,s163,s164,s165],\r\n                     [\"12\",s166,s167,s168,s169,s170,s171,s172,s173,s174,s175,s176,s177,s178,s179,s180],\r\n                     [\"13\",s181,s182,s183,s184,s185,s186,s187,s188,s189,s190,s191,s192,s193,s194,s195],\r\n                     [\"14\",s196,s197,s198,s199,s200,s201,s202,s203,s204,s205,s206,s207,s208,s209,s210],\r\n                     [\"15\",s211,s212,s213,s214,s215,s216,s217,s218,s219,s220,s221,s222,s223,s224,s225]]\r\n        Board.colourBoard(self)\r\n\r\n        # List of words on the board, all being objects of class 'Word'.\r\n        self.words = []\r\n\r\n    # Returns board printed nicely\r\n    def __str__(self):\r\n        string = \"\"\r\n        for i in range(len(self.board)):\r\n            for ii in self.board[i]:\r\n                string += f\"{ii} \"\r\n            string += \"\\n\"\r\n        return string\r\n\r\n    # Colours board, is used once in __init__\r\n    def colourBoard(self):\r\n        # Middle Tile\r\n        self.board[8][8] = cl(\"★\", \"red\")\r\n\r\n        # Double Word Tiles\r\n        for i in range(1, 16):\r\n            if i in [2, 3, 4, 5, 11, 12, 13, 14]:\r\n                self.board[i][i] = cl(char, \"red\")\r\n        for i in [[2, 14], [3, 13], [4, 12], [5, 11]]:\r\n            self.board[i[0]][i[1]] = cl(char, \"red\")\r\n            self.board[i[1]][i[0]] = cl(char, \"red\")\r\n\r\n        # Triple Word Tiles\r\n        for i in range(0, 15, 7):\r\n            self.board[1][1 + i] = cl(char, \"magenta\", attrs=[\"bold\"])\r\n            self.board[15][1 + i] = cl(char, \"magenta\", attrs=[\"bold\"])\r\n        for i in range(1, 16, 14):\r\n            self.board[8][i] = cl(char, \"magenta\", attrs=[\"bold\"])\r\n\r\n        # Double Letter Tiles\r\n        for i in range(4, 13, 8):\r\n            self.board[1][i] = cl(char, \"cyan\")\r\n            self.board[15][i] = cl(char, \"cyan\")\r\n        for i in range(3, 14, 2):\r\n            if i in [5, 11]:\r\n                continue\r\n            self.board[7][i] = cl(char, \"cyan\")\r\n            self.board[9][i] = cl(char, \"cyan\")\r\n            self.board[i][7] = cl(char, \"cyan\")\r\n            self.board[i][9] = cl(char, \"cyan\")\r\n        for i in range(1, 16, 7):\r\n            self.board[4][i] = cl(char, \"cyan\")\r\n            self.board[12][i] = cl(char, \"cyan\")\r\n\r\n        # Triple Letter Tiles\r\n        for i in range(6, 11, 4):\r\n            self.board[2][i] = cl(char, \"blue\", attrs=[\"bold\"])\r\n            self.board[14][i] = cl(char, \"blue\", attrs=[\"bold\"])\r\n        for i in range(2, 15, 4):\r\n            self.board[6][i] = cl(char, \"blue\", attrs=[\"bold\"])\r\n            self.board[10][i] = cl(char, \"blue\", attrs=[\"bold\"])\r\n\r\n    # Places a word on the board\r\n    def placeWord(self,word,idx,direc):\r\n        self.words.append(Word(word,idx,direc))\r\n        if direc == 'h':\r\n            for i in word:\r\n                self.board[idx[0]][idx[1]] = cl(i.upper(),'yellow',attrs=['bold'])\r\n                idx[1] += 1\r\n        if direc == 'v':\r\n            for i in word:\r\n                self.board[idx[0]][idx[1]] = cl(i.upper(),'yellow',attrs=['bold'])\r\n                idx[0] += 1\r\n\r\n    # Checks if a tile is taken on the board\r\n    def isTileTaken(self,idx):\r\n        if self.board[idx[0]][idx[1]] not in coloured and self.board[idx[0]][idx[1]] != char:\r\n            return True\r\n        return False\r\n\r\n\r\nclass Word:\r\n    def __init__(self, word, idx, direc):\r\n        self.word = word.upper()\r\n        self.idx = []\r\n        self.direc = direc\r\n        if direc == 'h':\r\n            for i in range(len(word)):\r\n                self.idx.append([idx[0],idx[1]+i])\r\n        if direc == 'v':\r\n            for i in range(len(word)):\r\n                self.idx.append([idx[0]+i,idx[1]])\r\n\r\n        wordsObj[self.word] = self\r\n\r\n\r\nclass Player:\r\n\r\n    def __init__(self, name, number, colour):\r\n        self.name = name\r\n        self.number = number\r\n        self.colour = colour\r\n        self.letters = []\r\n        self.points = 0\r\n        self.curword = \"\"\r\n        self.curidx = []\r\n        self.curdirec = ''\r\n\r\n    # Returns a string with the player name and their colour\r\n    def __str__(self):\r\n        return f\"\"\"{cl(f\"Player {self.number} - {cl(self.name,attrs=['bold','underline'])}\",self.colour)}\\n\"\"\" \\\r\n               f\"Your letters are: {', '.join([letterPointSub[x] for x in self.letters])}\"\r\n\r\n    # Refills the player's letters back up to 7\r\n    def refillLetters(self):\r\n        for i in range(0, 7-len(self.letters)):\r\n            s(0.01)\r\n            ran = choice(letterFreq)\r\n            self.letters.append(ran)\r\n            del letterFreq[self.letters.index(ran)]\r\n\r\n    # Checks if the player can play a word:\r\n        # LettersCheck -> Does the player have the required letters for this word?\r\n        # DictCheck -> Is the word valid in the dictionary?\r\n    def canPlayWord(self):\r\n        def LettersCheck():\r\n            curwordL = [char for char in self.curword]\r\n            letterscopy = self.letters.copy()\r\n            for i in curwordL:\r\n                if i in letterscopy:\r\n                    curwordL.remove(i)\r\n                    letterscopy.remove(i)\r\n                else:\r\n                    return False\r\n            return True\r\n        def DictCheck():\r\n            with open('dict.txt', 'r') as f:\r\n                for i in f:\r\n                    i = i.replace(\"\\n\", '')\r\n                    i = i.upper()\r\n                    if self.curword == i:\r\n                        return True\r\n                return False\r\n\r\n        return LettersCheck() and DictCheck()\r\n\r\n    # Automatically changes player's 'curdirec' if their word can only be played\r\n    def autoHorV(self):\r\n        if self.curidx[0] + len(self.curword) > 15:\r\n            return False\r\n        if self.curidx[1] + len(self.curword) > 15:\r\n            return False\r\n\r\n\r\nprint(\"hi\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nchar = '□'\r\ncoloured = [cl('★','red'),cl(char,'red'),cl(char,'magenta',attrs=['bold']),cl(char,'cyan'),cl(char,'blue')]\r\ncommands = [\"*help\",\"*key\",\"*rules\"]\r\n\r\n\r\ns1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = s9 = s10 = s11 = s12 = s13 = s14 = s15 = s16 = s17 = s18 = s19 = s20 \\\r\n    = s21 = s22 = s23 = s24 = s25 = s26 = s27 = s28 = s29 = s30 = s31 = s32 = s33 = s34 = s35 = s36 = s37 = s38 = s39 = s40 \\\r\n    = s41 = s42 = s43 = s44 = s45 = s46 = s47 = s48 = s49 = s50 = s51 = s52 = s53 = s54 = s55 = s56 = s57 = s58 = s59 = s60 \\\r\n    = s61 = s62 = s63 = s64 = s65 = s66 = s67 = s68 = s69 = s70 = s71 = s72 = s73 = s74 = s75 = s76 = s77 = s78 = s79 = s80 \\\r\n    = s81 = s82 = s83 = s84 = s85 = s86 = s87 = s88 = s89 = s90 = s91 = s92 = s93 = s94 = s95 = s96 = s97 = s98 = s99 = s100 \\\r\n    = s101 = s102 = s103 = s104 = s105 = s106 = s107 = s108 = s109 = s110 = s111 = s112 = s113 = s114 = s115 = s116 = s117 = s118 = s119 = s120 \\\r\n    = s121 = s122 = s123 = s124 = s125 = s126 = s127 = s128 = s129 = s130 = s131 = s132 = s133 = s134 = s135 = s136 = s137 = s138 = s139 = s140 \\\r\n    = s141 = s142 = s143 = s144 = s145 = s146 = s147 = s148 = s149 = s150 = s151 = s152 = s153 = s154 = s155 = s156 = s157 = s158 = s159 = s160 \\\r\n    = s161 = s162 = s163 = s164 = s165 = s166 = s167 = s168 = s169 = s170 = s171 = s172 = s173 = s174 = s175 = s176 = s177 = s178 = s179 = s180 \\\r\n    = s181 = s182 = s183 = s184 = s185 = s186 = s187 = s188 = s189 = s190 = s191 = s192 = s193 = s194 = s195 = s196 = s197 = s198 = s199 = s200 \\\r\n    = s201 = s202 = s203 = s204 = s205 = s206 = s207 = s208 = s209 = s210 = s211 = s212 = s213 = s214 = s215 = s216 = s217 = s218 = s219 = s220 \\\r\n    = s221 = s222 = s223 = s224 = s225 = char\r\n\r\n# Conversion from 'Word' object value to the actual object\r\nwordsObj = {\r\n\r\n}\r\n\r\n# The frequency of each letter\r\nletterFreq = ['A','A','A','A','A','A','A','A',\r\n              'B','B',\r\n              'C','C',\r\n              'D','D','D','D',\r\n              'E','E','E','E','E','E','E','E','E','E','E','E',\r\n              'F','F',\r\n              'G','G','G',\r\n              'H','H',\r\n              'I','I','I','I','I','I','I','I','I',\r\n              'J',\r\n              'K',\r\n              'L','L','L','L',\r\n              'M','M',\r\n              'N','N','N','N','N','N',\r\n              'O','O','O','O','O','O','O','O',\r\n              'P','P',\r\n              'Q',\r\n              'R','R','R','R','R','R',\r\n              'S','S','S','S',\r\n              'T','T','T','T','T','T',\r\n              'U','U','U','U',\r\n              'V','V',\r\n              'W','W',\r\n              'X',\r\n              'Y','Y',\r\n              'Z']\r\n\r\n# The points each letter awards\r\nletterPoint = {\r\n    \"A\": 1,\r\n    \"B\": 3,\r\n    \"C\": 3,\r\n    \"D\": 2,\r\n    \"E\": 1,\r\n    \"F\": 4,\r\n    \"G\": 2,\r\n    \"H\": 4,\r\n    \"I\": 1,\r\n    \"J\": 8,\r\n    \"K\": 5,\r\n    \"L\": 1,\r\n    \"M\": 3,\r\n    \"N\": 1,\r\n    \"O\": 1,\r\n    \"P\": 3,\r\n    \"Q\": 10,\r\n    \"R\": 1,\r\n    \"S\": 1,\r\n    \"T\": 1,\r\n    \"U\": 1,\r\n    \"V\": 4,\r\n    \"W\": 4,\r\n    \"X\": 8,\r\n    \"Y\": 4,\r\n    \"Z\": 10\r\n}\r\n\r\n# Conversion of regular letter to letter with it's point value in subscript.\r\nletterPointSub = {\r\n    \"A\": \"A₁\",\r\n    \"B\": \"B₃\",\r\n    \"C\": \"C₃\",\r\n    \"D\": \"D₂\",\r\n    \"E\": \"E₁\",\r\n    \"F\": \"F₄\",\r\n    \"G\": \"G₂\",\r\n    \"H\": \"H₄\",\r\n    \"I\": \"I₁\",\r\n    \"J\": \"J₈\",\r\n    \"K\": \"K₅\",\r\n    \"L\": \"L₁\",\r\n    \"M\": \"M₃\",\r\n    \"N\": \"N₁\",\r\n    \"O\": \"O₁\",\r\n    \"P\": \"P₃\",\r\n    \"Q\": \"Q₁₀\",\r\n    \"R\": \"R₁\",\r\n    \"S\": \"S₁\",\r\n    \"T\": \"T₁\",\r\n    \"U\": \"U₁\",\r\n    \"V\": \"V₄\",\r\n    \"W\": \"W₄\",\r\n    \"X\": \"X₈\",\r\n    \"Y\": \"Y₄\",\r\n    \"Z\": \"Z₁₀\"\r\n}\r\n\r\n# Number to Letter converter for indexing\r\nletToNum = {\r\n    \"A\": 1,\r\n    \"B\": 2,\r\n    \"C\": 3,\r\n    \"D\": 4,\r\n    \"E\": 5,\r\n    \"F\": 6,\r\n    \"G\": 7,\r\n    \"H\": 8,\r\n    \"I\": 9,\r\n    \"J\": 10,\r\n    \"K\": 11,\r\n    \"L\": 12,\r\n    \"M\": 13,\r\n    \"N\": 14,\r\n    \"O\": 15\r\n}\r\n# Letter to Number converter for indexing\r\nnumToLet = {\r\n    1: \"A\",\r\n    2: \"B\",\r\n    3: \"C\",\r\n    4: \"D\",\r\n    5: \"E\",\r\n    6: \"F\",\r\n    7: \"G\",\r\n    8: \"H\",\r\n    9: \"I\",\r\n    10: \"J\",\r\n    11: \"K\",\r\n    12: \"L\",\r\n    13: \"M\",\r\n    14: \"N\",\r\n    15: \"O\",\r\n}\r\n\r\n# Conversion from tiles to extra points awarded\r\ntiles = {\r\n    cl('★','red'): ['word',2],\r\n    cl(char,'red'): ['word',2],\r\n    cl(char,'magenta',attrs=['bold']): ['word',3],\r\n    cl(char,'cyan'): ['letter',2],\r\n    '\\x1b[1m\\x1b[34m□\\x1b[0m': ['letter',3]\r\n}\r\n\r\n\r\n# [PRINT] Rules\r\ndef rules():\r\n    print(cl(\"Scrabble Rules\",attrs=['underline']))\r\n    s(2)\r\n    print(\"There are two players. Each one gets a set of 7 letters.\")\r\n    s(1)\r\n    print(\"The players take turns to place words on the board to try and accumulate the most points as possible.\")\r\n    s(2)\r\n    print(\"Each letter has a point value next to it, which shows how many points it will give if played.\")\r\n    s(2)\r\n    print(\"Different letters have different frequencies.\")\r\n    s(2)\r\n    print(\"For example, E is a common letter so there are twelve E tiles.\")\r\n    s(2)\r\n    print(\"However, Z is a rare letter so there is only one Z tile.\")\r\n    s(2)\r\n    print(\"The rarer a letter is, the more points it grants.\")\r\n    s(1.5)\r\n    print(\"Player 1, on the first turn, must play their word in a place where one letter of the word is on the middle star.\")\r\n    s(3)\r\n    print(\"After this, all players must place their words so they connect with other words already on the board.\")\r\n    s(3)\r\n    print(\"For example, the word 'FLOOR' is on the board.\")\r\n    s(1.5)\r\n    print(\"You are trying to place the word 'LOVE'.\")\r\n    s(1.5)\r\n    print(\"You need to place this word in a way such that the L in 'FLOOR' starts your word, 'LOVE'\")\r\n    s(2)\r\n    print(\"Therefore, you'd need to sacrifice placing your L tile to be able to place the word.\")\r\n    s(1.5)\r\n\r\n\r\n# [PRINT] Key for the coloured tiles\r\ndef key():\r\n    print(cl(\"Key:\",attrs=['underline']))\r\n    print(f\"{cl('★','red')} - Double Word Middle Tile (First move needs to have one letter in congruence with it.)\")\r\n    print(f\"{cl(char,'red')} - Double Word Tile (Doubles your points for the word)\")\r\n    print(f\"{cl(char,'magenta',attrs=['bold'])} - Triple Word Tile (Triples your points for the word)\")\r\n    print(f\"{cl(char,'cyan')} - Double Letter Tile (Doubles the points for the letter that is on it)\")\r\n    print(f\"{cl(char,'blue')} - Triple Letter Tile (Triples the points for the letter that is on it)\")\r\n\r\n\r\n# [PRINT] Commands process\r\ndef command(inp):\r\n    if inp == \"*help\":\r\n        pass\r\n    elif inp == \"*key\":\r\n        key()\r\n    elif inp == \"*rules\":\r\n        rules()\r\n\r\n\r\n# [PRINT] Prints multiple things at one time\r\ndef multPrint(*toprint):\r\n    for i in toprint:\r\n        print(i)\r\n\r\n\r\n# [CALC] Checks the longest word that can be made with the letters in the given list\r\ndef checkWords(list):\r\n    maxlen = 0\r\n    maxword = ''\r\n    with open(\"dict.txt\",\"r\") as f:\r\n        for i in f:\r\n            i = i.replace(\"\\n\",'')\r\n            i = i.upper()\r\n            wordL = [x for x in i]\r\n            listcopy = list.copy()\r\n            for ii in list:\r\n                if ii in wordL:\r\n                    listcopy.remove(ii)\r\n                    wordL.remove(ii)\r\n                    if len(wordL) == 0:\r\n                        if len(i) > maxlen:\r\n                            maxlen = len(i)\r\n                            maxword = i\r\n        return maxword\r\n\r\n\r\n# [CALC] Converts a number/letter index to number/number\r\ndef idxConverter(stridx):\r\n    idx = [None, None]\r\n    idx[1] = letToNum[stridx[-1].upper()]\r\n    stridx = stridx[0:-1]\r\n    idx[0] = int(stridx)\r\n    return idx\r\n\r\n\r\n\r\n\r\np1 = Player(\"Yuval\", \"1\", \"red\")\r\nboard = Board()\r\nprint(board)\r\n\r\nprint(idxConverter(input()))\r\n\r\n\r\n\r\n# board.placeWord(\"Hello\",[6,14],'h')\r\n# multPrint(board,\r\n#           board.words,\r\n#           board.words[0].idx,\r\n#           wordsObj)\r\n#\r\n# board.placeWord(\"love\",[4,14],'v')\r\n# multPrint(board,\r\n#           board.words,\r\n#           board.words[1].idx,\r\n#           wordsObj)\r\n\r\n# while True:\r\n#     p1.refillLetters()\r\n#     print(p1)\r\n#     print(checkwords(p1.letters))\r\n#     p1.curword = input(\"Word: \").upper()\r\n#     print(p1.curword)\r\n#     print(p1.canPlayWord())\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 2431c58a528298bb1fc3fe120539fce5141faceb)
+++ b/main.py	(date 1647272144169)
@@ -174,7 +174,6 @@
             return False
 
 
-print("hi")
 
 
 
